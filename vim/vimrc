source $HOME/.vim/core.vim

"disable visual bell
set visualbell t_vb=

"try to make possible to navigate within lines of wrapped lines
nmap <Down> gj
nmap <Up> gk
set fo=l

"statusline setup
set statusline=%f       "tail of the filename
set statusline+=%{fugitive#statusline()} " Git
set statusline+=%{exists('g:loaded_rvm')?rvm#statusline():''} " RVM Options
set statusline+=%=      "left/right separator
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file
set laststatus=2
" end status line
"turn off needless toolbar on gvim/mvim
set guioptions-=T
"turn off the scroll bar
set guioptions-=L
set guioptions-=r
"recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

"return '[\s]' if trailing white space is detected
"return '' otherwise
function! StatuslineTrailingSpaceWarning()
    if !exists("b:statusline_trailing_space_warning")
        if search('\s\+$', 'nw') != 0
            let b:statusline_trailing_space_warning = '[\s]'
        else
            let b:statusline_trailing_space_warning = ''
        endif
    endif
    return b:statusline_trailing_space_warning
endfunction


"return the syntax highlight group under the cursor ''
function! StatuslineCurrentHighlight()
    let name = synIDattr(synID(line('.'),col('.'),1),'name')
    if name == ''
        return ''
    else
        return '[' . name . ']'
    endif
endfunction

"recalculate the tab warning flag when idle and after writing
autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning

"return '[&et]' if &et is set wrong
"return '[mixed-indenting]' if spaces and tabs are used to indent
"return an empty string if everything is fine
function! StatuslineTabWarning()
    if !exists("b:statusline_tab_warning")
        let tabs = search('^\t', 'nw') != 0
        let spaces = search('^ ', 'nw') != 0

        if tabs && spaces
            let b:statusline_tab_warning =  '[mixed-indenting]'
        elseif (spaces && !&et) || (tabs && &et)
            let b:statusline_tab_warning = '[&et]'
        else
            let b:statusline_tab_warning = ''
        endif
    endif
    return b:statusline_tab_warning
endfunction

"recalculate the long line warning when idle and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_long_line_warning

"return a warning for "long lines" where "long" is either &textwidth or 80 (if
"no &textwidth is set)
"
"return '' if no long lines
"return '[#x,my,$z] if long lines are found, were x is the number of long
"lines, y is the median length of the long lines and z is the length of the
"longest line
function! StatuslineLongLineWarning()
    if !exists("b:statusline_long_line_warning")
        let long_line_lens = s:LongLines()

        if len(long_line_lens) > 0
            let b:statusline_long_line_warning = "[" .
                        \ '#' . len(long_line_lens) . "," .
                        \ 'm' . s:Median(long_line_lens) . "," .
                        \ '$' . max(long_line_lens) . "]"
        else
            let b:statusline_long_line_warning = ""
        endif
    endif
    return b:statusline_long_line_warning
endfunction

"return a list containing the lengths of the long lines in this buffer
function! s:LongLines()
    let threshold = (&tw ? &tw : 80)
    let spaces = repeat(" ", &ts)

    let long_line_lens = []

    let i = 1
    while i <= line("$")
        let len = strlen(substitute(getline(i), '\t', spaces, 'g'))
        if len > threshold
            call add(long_line_lens, len)
        endif
        let i += 1
    endwhile

    return long_line_lens
endfunction

"find the median of the given array of numbers
function! s:Median(nums)
    let nums = sort(a:nums)
    let l = len(nums)

    if l % 2 == 1
        let i = (l-1) / 2
        return nums[i]
    else
        return (nums[l/2] + nums[(l/2)-1]) / 2
    endif
endfunction

"indent settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

"folding settings
"
" :commands:
"   'za': toggles
"   'zc': closes
"   'zo': opens
"   'zR': open all
"   'zM': close all
"
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

set wildmode=list:longest   "make cmdline tab completion similar to bash
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~,node_modules,bower_components "stuff to ignore when tab completing

"display tabs and trailing spaces
"set list
"set listchars=tab:\ \ ,extends:>,precedes:<
" disabling list because it interferes with soft wrap

" toggle invisible characters
" set list
" set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
" set showbreak=↪

set formatoptions-=o "dont continue comments when pushing o/O

"vertical/horizontal scroll off settings
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

"load ftplugins and indent files
filetype plugin on
filetype indent on

"turn on syntax highlighting
syntax on

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"hide buffers when not displayed
set hidden

"Activate smartcase
set ic
set smartcase

if has("gui_running")
    "tell the term has 256 colors
    set t_Co=256

    if empty($VIM_COLORSCHEME)
      colorscheme molokai
    else
      set background=dark
      colorscheme $VIM_COLORSCHEME
    end
    set guitablabel=%M%t
    set lines=40
    set columns=115

    if has("gui_gnome")
        set term=gnome-256color
        if empty($VIM_COLORSCHEME)
          colorscheme molokai
        else
          set background=dark
          colorscheme $VIM_COLORSCHEME
        end
        set guifont=Monospace\ Bold\ 12
    endif

    if has("gui_mac") || has("gui_macvim")
        set guifont=Menlo:h12
        set transparency=7
    endif

    if has("gui_win32") || has("gui_win32s")
        set guifont=Consolas:h12
        set enc=utf-8
    endif
else
    "dont load csapprox if there is no gui support - silences an annoying warning
    let g:CSApprox_loaded = 1

    if $COLORTERM == 'gnome-terminal'
      set term=gnome-256color
      if empty($VIM_COLORSCHEME)
        colorscheme molokai
      else
        set background=dark
        colorscheme $VIM_COLORSCHEME
      end
    else
      set term=xterm-256color
      if empty($VIM_COLORSCHEME)
        colorscheme molokai
      else
        set background=dark
        colorscheme $VIM_COLORSCHEME
      end
    endif
endif

" PeepOpen uses <Leader>p as well so you will need to redefine it so something
" else in your ~/.vimrc file, such as:
" nmap <silent> <Leader>q <Plug>PeepOpen

silent! nmap <silent> <Leader>p :NERDTreeToggle<CR>

"make <c-l> clear the highlight as well as redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

"map to bufexplorer
nnoremap <leader>b :BufExplorer<cr>
"map to bufergator
let g:buffergator_suppress_keymaps = 1
nnoremap <leader>bg :BuffergatorToggle<cr>

"disable resizing when calling buffergator
let g:buffergator_autoexpand_on_split = 0

"map Q to something useful
noremap Q gq

"make Y consistent with C and D
nnoremap Y y$

"bindings for ragtag
inoremap <M-o>       <Esc>o
inoremap <C-j>       <Down>
let g:ragtag_global_maps = 1

" # Syntastic recomented settings
"   =============================
" > See https://github.com/vim-syntastic/syntastic/blob/master/README.markdown
"
"mark syntax errors with :signs
" let g:syntastic_enable_signs=1
"
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
"End of Syntastic

"key mapping for vimgrep result navigation
map <A-o> :copen<CR>
map <A-q> :cclose<CR>
map <A-j> :cnext<CR>
map <A-k> :cprevious<CR>

"key mapping for Gundo
nnoremap <F4> :GundoToggle<CR>
nmap <leader>u :undoToggle<cr>

"visual search mappings
function! s:VSetSearch()
    let temp = @@
    norm! gvy
    let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR>


"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction

"define :HighlightLongLines command to highlight the offending parts of
"lines that are longer than the specified length (defaulting to 80)
command! -nargs=? HighlightLongLines call s:HighlightLongLines('<args>')
function! s:HighlightLongLines(width)
    let targetWidth = a:width != '' ? a:width : 79
    if targetWidth > 0
        exec 'match Todo /\%>' . (targetWidth) . 'v/'
    else
        echomsg "Usage: HighlightLongLines [natural number]"
    endif
endfunction

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

"key mapping for window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"key mapping for saving file
nmap <C-s> :w<CR>

"key mapping for tab navigation
nmap <S-Tab> gt
nmap <C-S-Tab> gT

"Key mapping for textmate-like indentation
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

let ScreenShot = {'Icon':0, 'Credits':0, 'force_background':'#FFFFFF'}

" when press { + Enter, the {} block will expand.
imap {<CR> {}<ESC>i<CR><ESC>O

" NERDTree settings
nmap wm :NERDTree<cr>
let NERDTreeIgnore=['\.swp$']

nnoremap <Esc>A <up>
nnoremap <Esc>B <down>
nnoremap <Esc>C <right>
nnoremap <Esc>D <left>
inoremap <Esc>A <up>
inoremap <Esc>B <down>
inoremap <Esc>C <right>
inoremap <Esc>D <left>


if &term =~ '256color'
  " Disable background color erase (BCE), see http://goo.gl/SX794N
  set t_ut=
endif


if has("balloon_eval")
  set noballooneval
endif
" End features vimrc by paulopatto/vimfiles

" Fonlding settings by Bryan Liles
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use


" Rspec.vim mappings
let g:rspec_executable = "bundle exec rspec"

function! ToggleRSpecCommand()
  if g:rspec_executable == "bundle exec rspec"
    let g:rspec_executable = "bin/rspec"
  else
    let g:rspec_executable = "bundle exec rspec"
  endif
  echo "rspec_executable set to " . g:rspec_executable
  let g:rspec_command = "Dispatch " . g:rspec_executable . " {spec} --format=progress"
endfunction

map <Leader>e :call ToggleRSpecCommand()<CR>

map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

"
" For AirLine
let g:airline_powerline_fonts = 1

" Ag config
let g:ackprg = 'ag --nogroup --nocolor --column'

" Set types
autocmd FileType c,h,cpp,hpp setl cindent ts=4 sts=4 sw=4 noet nolist lcs+=tab:\ \
autocmd FileType asm setl ts=8 sts=8 sw=8 noet lcs+=tab:\ \
autocmd FileType go setl ts=4 sts=4 sw=4 noet commentstring=\/\/\ %s lcs+=tab:\ \
autocmd FileType python setl ts=4 sts=4 sw=4
autocmd FileType make,automake setl ts=4 sts=4 sw=4 noet lcs+=tab:\ \
autocmd BufRead *.clj let b:delimitMate_quotes="\""
autocmd BufRead *irb-interactive* setl ft=ruby
autocmd BufRead nginx.conf setl ft=nginx

let g:Pwerline_symbols='fancy'

""" Multi cursors
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" Map start key separately from next key
let g:multi_cursor_start_key='<F6>'
"g:multi_cursor_exit_from_visual_mode
"g:multi_cursor_exit_from_insert_mode
" Default highlighting (see help :highlight and help :highlight-link)
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual

" Configs for ngmy/vim-rubocop
" ============================
let g:vimrubocop_config="$HOME/Code/dotfiles/ruby/rubocop.default.yml"
let g:vimrubocop_keymap = 0
" Enable user \c to use RuboCop
nmap <Leader>c :RuboCop<CR>
"End of configs for ngmy/vim-rubocop

" CTags configs
" With this config enable
" - `Ctrl+]` - go to definition
" - `Ctrl+T` - Jump back from the definition.
" - `Ctrl+\` - Open the definition in a new tab
" - `Alt+]` - Open the definition in a vertical split
" - `Ctrl+W | Ctrl+]` - Open the definition in a horizontal split
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" # One Theme
" Vim Airline theme
" https://github.com/rakr/vim-one
"let g:airline_theme='one' "Uncoment this <<<<<<
" # Usage
"
" One comes in two flavors: light and dark.
"
" ```
" colorscheme one
" set background=dark " for the dark version
" " set background=light " for the light version
" ```
" ## Italic support
"
" Some terminals do not support italic, cf. #3.
"
" If your terminal does support italic, you can set the g:one_allow_italics
" variable to 1 in your .vimrc or .config/nvim/init.vim:
"
" ```
" set background=light        " for the light version
" let g:one_allow_italics = 1 " I love italic for comments
" colorscheme one
" ```
" ## True color support
"
"To benefit from the true color support make sure to add the following lines in your .vimrc or .config/nvim/init.vim
"
"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
" ```
" if (empty($TMUX))
"   if (has("nvim"))
"   "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
"   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"   "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
"   " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif
" ```
" ## Tmux support
"
" To get true color working in tmux, ensure that the $TERM environment variable is set to xterm-256color.
" Inside the .tmux.conf file we need to override this terminal and also set the default terminal as 256 color.
" ```
" # Add truecolor support
" set-option -ga terminal-overrides ",xterm-256color:Tc"
" # Default terminal is 256 colors
" set -g default-terminal "screen-256color"
" ```
"
" > Note that this only works for Neovim (tested on 0.1.5).
" > For some reason Vim (7.5.2334) doesn't play nice.
" > See blog post by Anton Kalyaev for more details on setting up tmux.
"
" For Vim inside tmux, you can add the following snippet in your ~/.vimrc
"
" ```
" set t_8b=^[[48;2;%lu;%lu;%lum
" set t_8f=^[[38;2;%lu;%lu;%lum
" ```
" > Note: the `^[` in this snippet is a real escape character. To insert it, press Ctrl-V and then Esc.
" > NOTE: For :clipboard need vim with +clipboard
set clipboard=unnamedplus
:silent exe "g:flog_enable"




" FOR ackvim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif


" FOR LSC dart autocomplete
let g:lsc_auto_map = v:true

" The default keymaps of vim-lsc are:

" * 'GoToDefinition': <C-]>,
" * 'GoToDefinitionSplit': [<C-W>], <C-W><C-]>],
" * 'FindReferences': gr,
" * 'NextReference': <C-n>,
" * 'PreviousReference': <C-p>,
" * 'FindImplementations': gI,
" * 'FindCodeActions': ga,
" * 'Rename': gR,
" * 'DocumentSymbol': go,
" * 'WorkspaceSymbol': gS,
" * 'SignatureHelp': gm,
